import socket
import multiprocessing
import re
# import mini_farmework


class WSGISserver(object):
    def __init__(self):
        # 创建套接字(服务器)
        self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        # 套接字 地址重用选项 1设置 0 取消
        self.server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        # 绑定
        self.server_socket.bind(("", 9999))
        # 监听 被动套接字 设置已完成三次握手对列的长度
        self.server_socket.listen(128)

    def request_handler(self, client_socket):
        """为每个客户端进行服务"""
        recv_data = client_socket.recv(4096)
        # 判断客户端套接字是否断开链接
        if not recv_data:
            print("客户端已经断开链接")
            client_socket.close()
            return
        # 对客户端发送的信息进行数据解码
        request_str_data = recv_data.decode("utf-8")
        # 请求行中第一个数据 就是用户的资源请求路径
        # request_line
        # GET /index.html HTTP/1.1
        # POST /index.html HTTP/1.1
        # 同过正则表达式来获取数据资源请求路径
        ret = re.match(r"[^/]+([^ ]+)", request_str_data)
        if ret:
            path_info = ret.group(1)  # index.html
            print("_+_" * 10, path_info)
        else:
            path_info = "/"
        print("用户请求路径%s" % path_info)
        # 如果通过正则提取url之后, 发现是/ 意味着需要访问主页
        # 一般主页名为 /index.html
        if path_info == "/":
            path_info = "/index.html"
        # 通过if判断区分静态还是动态请求
        # 假如 .py结尾的动态请求
        if not path_info.endswith(".py"):
            # 判断是不是以.py结尾
            try:
                with open("./html" + path_info, "rb") as f:
                    file_data = f.read()
            except Exception as e:
                # 用户请求路径失败了
                response_line = "HTTP/1.1 404 Not Found\r\n"
                response_line += "Server: PythonWebServer2.0\r\n"
                response_line += "\r\n"
                response_body = "ERROR!!!!!"
                response_data = response_line   + response_body
                # 发送
                client_socket.send(response_data.encode("utf-8"))
            else:
                # 给客户端回馈http响应报文
                response_header = "HTTP/1.1 200 OK\r\n"
                response_header += "Server: PythonWebServer1.0\r\n"
                response_header += "\r\n"
                # 响应体(response_body)
                response_body = file_data
                response = response_header.encode("utf-8") + response_body
                # 发送
                client_socket.send(response)
            finally:
                # 关闭套接字
                client_socket.close()
        else:
            # 如果是以.py结尾的
            # 响应头(response_header)
            # response_header = "HTTP/1.1 200 OK\r\n"
            # response_header += "Server: PythonWebServer1.0\r\n"
            # response_header += "Content-Type: text/html; charset=UTF-8\r\n"
            # response_header += "\r\n"

            # 响应体(response_body)
            # if path_info == "/index.py":
            #     response_body = "-----主页----current time is %s" % time.ctime()
            # elif path_info == "/center.py":
            #     response_body = "-----中心页面----current time is %s" % time.ctime()
            # else:
            #     response_body = "-----not found you page-----"
            env = dict()
            # env['PATH_INFO'] = path_info
            response_body = mini_farmework.application(env, self.set_header)
            # 拼接response
            response = self.response_header + response_body

            # 发送
            client_socket.send(response.encode("utf-8"))

    def set_header(self, status, headers):
        print("我在wed 里(0.0)")
        response_header = "HTTP/1.1 %s \r\n" % status
        for temp in headers:
            response_header += "%s: %s \r\n" % (temp[0], temp[1])
        response_header += "\r\n"
        self.response_header = response_header

    def run(self):
        """等待客户端的链接, 然后创建子进程为其服务"""
        while True:
            # 从列队中取出一个客户套接字用来服务
            client_socket, client_addr = self.server_socket.accept()
            # 创建进程来进行对客户端服务
            p = multiprocessing.Process(target=self.request_handler, args=(client_socket,))
            p.start()
            client_socket.close()


def main():
    # 创建一个server对象
    wsgi_server = WSGISserver()
    # 调用对象的方法
    wsgi_server.run()


if __name__ == "__main__":
    main()
